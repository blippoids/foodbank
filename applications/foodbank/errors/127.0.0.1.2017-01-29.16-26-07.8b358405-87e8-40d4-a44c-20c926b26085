(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'firstName'"
p3
sS'layer'
p4
S'/Users/ggarcia/Documents/foodbank/applications/foodbank/controllers/api_info.py'
p5
sS'code'
p6
S'__author__ = \'ggarcia\'\n\nimport requests\n\nclass ngclass:\n    def __init__ (self):\n        self.base_url="https://www.neighbourly.com/api"\n        self.project_id = "5734bf1cb9918e1880f27a6e"\n\n    def get_page(self, url):\n        """ Get a page and return a json object asociated"""\n        url = "%s%s" %(self.base_url, url)\n        print url\n        r=requests.get(url)\n        if r.status_code == 200:\n            return r.json()\n        return []\n\n    def get_project_info(self):\n        """ Return a json for the info project """\n        url="/projects/%s" %(self.project_id,)\n        return self.get_page(url)\n\n    def get_all_events(self):\n        """ Get all the events information """\n        url = "/projectEvents/%s/all" %(self.project_id, )\n        return self.get_page(url)\n\n    def get_event_voluteers(self, event_id):\n        """ Get the voluteers associated with an event """\n        url="/projectEventVolunteers/%s/all/bystatus?projectEventId=%s&targetProjectId=&status=1" %(event_id, event_id)\n        return self.get_page(url)\n\n    def get_profile(self, user_id):\n        """ """\n        url="/profiles/%s" %(user_id, )\n        return self.get_page(url)\n\n    def volunteer_in_db(self, volunteer_object):\n      volunteer_id=db(db.volunteer.volunteer_id == volunteer_object[\'id\']).select(db.volunteer.id).first()\n      print volunteer_id\n      if volunteer_id is None:\n        return None\n      return volunteer_id[\'id\']\n\n    def get_volunteer_id(self, volunteer_object):\n      ## check if exists\n      if \'id\' not in volunteer_object.keys():\n        raise "Not an volunteer object"\n\n      volunteer_id=self.volunteer_in_db(volunteer_object)\n      if volunteer_id is None:\n        volunteer_id=db.volunteer.insert(volunteer_id=volunteer_object[\'id\'], first_name=volunteer_object[\'firstName\'], last_name=volunteer_object[\'lastName\'])\n\n      return volunteer_id\n\n    def event_in_db(self, event_object):\n      event_id=db(db.event.event_id == event_object[\'id\']).select(db.event.id).first()\n      if event_id is None:\n        return None\n      else:\n        return event_id[\'id\']\n\n    def get_event_id(self, event_object):\n      ## check if exists\n      if \'id\' not in event_object.keys():\n        raise "Not an event object"\n\n      event_id=self.event_in_db(event_object)\n      if event_id is None:\n        print "Event not present, inserting"\n        organiser_id = self.get_volunteer_id(self.get_profile(event_object[\'organiserId\']))\n        location_id = self.get_location_id(event_object[\'location\'])\n        event_id=db.event.insert(event_id=event_object[\'id\'],\n                                 name=event_object[\'name\'],\n                                 status=event_object[\'status\'],\n                                 end_date_time=event_object[\'endDateTime\'],\n                                 organiser_id=organiser_id)\n                                 # location_id=location_id)\n      return event_id\n\n    def location_in_db(self, location_object):\n      location_id=db((db.location.latitude == location_object[\'latitude\']) and\n                     (db.location.longitude == location_object[\'longitude\']) and\n                     (db.location.post_code == location_object[\'postCode\'])).select(db.location.id).first()\n\n      if location_id is None:\n        return None\n      return location_id[\'id\']\n\n    def get_location_id(self, location_object):\n      """  """\n      if \'latitude\' not in location_object.keys():\n        raise "Not a location object"\n\n      location_id=self.location_in_db(location_object)\n      if location_id is None:\n        location_id=db.location.insert(town=location_object[\'town\'],\n                                       city=location_object[\'city\'],\n                                       country=location_object[\'country\'],\n                                       longitude=location_object[\'longitude\'],\n                                       latitude=location_object[\'latitude\'],\n                                       street=location_object[\'street\'],\n                                       post_code=location_object[\'postCode\'],\n                                       post_code_prefix=location_object[\'postCodePrefix\'])\n      return location_id\n\n    def put_voluteer_in_event(self, event_id, volunteer_id):\n      """ insert a volunteer in an event """\n\n      ig = db((db.event_volunteer.event_id == event_id) and (db.event_volunteer.valunteer_id == volunteer_id)).select().first()\n      if ig is None:\n        ig = db.event_volunteer.insert(event_id=event_id, volunteer_id=volunteer_id)\n      return 0\n\n    def check_events(self):\n\n      ## get all events\n      events = self.get_all_events()\n      for event in events:\n        event_id = self.get_event_id(event)\n        print "%s, %s" %(event_id, event[\'name\'])\n        for volunteer in self.get_event_voluteers(event[\'id\']):\n          vol_id = self.get_volunteer_id(volunteer)\n          self.put_voluteer_in_event(event_id, vol_id)\n          print "\\t\\t%s" %(volunteer, )\n\n      return None\n\ndef api_test():\n  nbg = ngclass()\n  events = nbg.check_events()\n\n\n  # for event in events[:1]:\n  #   print event[\'name\'], event[\'id\'], event[\'status\'], event[\'endDateTime\']\n  #   print nbg.get_event_id(event)\n  #\n  # for user in nbg.get_event_voluteers("585ea7adc7ac880cdcf3817b"):\n  #   print user\n\n\n\n  return dict()\nresponse._vars=response._caller(api_test)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/ggarcia/Documents/foodbank/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/ggarcia/Documents/foodbank/applications/foodbank/controllers/api_info.py", line 145, in <module>\n  File "/Users/ggarcia/Documents/foodbank/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/ggarcia/Documents/foodbank/applications/foodbank/controllers/api_info.py", line 132, in api_test\n    events = nbg.check_events()\n  File "/Users/ggarcia/Documents/foodbank/applications/foodbank/controllers/api_info.py", line 124, in check_events\n    vol_id = self.get_volunteer_id(volunteer)\n  File "/Users/ggarcia/Documents/foodbank/applications/foodbank/controllers/api_info.py", line 53, in get_volunteer_id\n    volunteer_id=db.volunteer.insert(volunteer_id=volunteer_object[\'id\'], first_name=volunteer_object[\'firstName\'], last_name=volunteer_object[\'lastName\'])\nKeyError: \'firstName\'\n'
p11
s.